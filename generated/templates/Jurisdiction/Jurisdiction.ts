// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Confirmation extends ethereum.Event {
  get params(): Confirmation__Params {
    return new Confirmation__Params(this);
  }
}

export class Confirmation__Params {
  _event: Confirmation;

  constructor(event: Confirmation) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ruling(): string {
    return this._event.parameters[2].value.toString();
  }

  get evidence(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get witness(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ContractURI extends ethereum.Event {
  get params(): ContractURI__Params {
    return new ContractURI__Params(this);
  }
}

export class ContractURI__Params {
  _event: ContractURI;

  constructor(event: ContractURI) {
    this._event = event;
  }

  get param0(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class GUIDCreated extends ethereum.Event {
  get params(): GUIDCreated__Params {
    return new GUIDCreated__Params(this);
  }
}

export class GUIDCreated__Params {
  _event: GUIDCreated;

  constructor(event: GUIDCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class GUIDURIChange extends ethereum.Event {
  get params(): GUIDURIChange__Params {
    return new GUIDURIChange__Params(this);
  }
}

export class GUIDURIChange__Params {
  _event: GUIDURIChange;

  constructor(event: GUIDURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Nominate extends ethereum.Event {
  get params(): Nominate__Params {
    return new Nominate__Params(this);
  }
}

export class Nominate__Params {
  _event: Nominate;

  constructor(event: Nominate) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OpinionChange extends ethereum.Event {
  get params(): OpinionChange__Params {
    return new OpinionChange__Params(this);
  }
}

export class OpinionChange__Params {
  _event: OpinionChange;

  constructor(event: OpinionChange) {
    this._event = event;
  }

  get chainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get domain(): string {
    return this._event.parameters[3].value.toString();
  }

  get rating(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get score(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Post extends ethereum.Event {
  get params(): Post__Params {
    return new Post__Params(this);
  }
}

export class Post__Params {
  _event: Post;

  constructor(event: Post) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get entRole(): string {
    return this._event.parameters[2].value.toString();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Reaction extends ethereum.Event {
  get params(): Reaction__Params {
    return new Reaction__Params(this);
  }
}

export class Reaction__Params {
  _event: Reaction;

  constructor(event: Reaction) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reactionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ReactionCreated extends ethereum.Event {
  get params(): ReactionCreated__Params {
    return new ReactionCreated__Params(this);
  }
}

export class ReactionCreated__Params {
  _event: ReactionCreated;

  constructor(event: ReactionCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleCreated extends ethereum.Event {
  get params(): RoleCreated__Params {
    return new RoleCreated__Params(this);
  }
}

export class RoleCreated__Params {
  _event: RoleCreated;

  constructor(event: RoleCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoleURIChange extends ethereum.Event {
  get params(): RoleURIChange__Params {
    return new RoleURIChange__Params(this);
  }
}

export class RoleURIChange__Params {
  _event: RoleURIChange;

  constructor(event: RoleURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Rule extends ethereum.Event {
  get params(): Rule__Params {
    return new Rule__Params(this);
  }
}

export class Rule__Params {
  _event: Rule;

  constructor(event: Rule) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get about(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get affected(): string {
    return this._event.parameters[3].value.toString();
  }

  get uri(): string {
    return this._event.parameters[4].value.toString();
  }

  get negation(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class RuleDisabled extends ethereum.Event {
  get params(): RuleDisabled__Params {
    return new RuleDisabled__Params(this);
  }
}

export class RuleDisabled__Params {
  _event: RuleDisabled;

  constructor(event: RuleDisabled) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get disabled(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RuleEffect extends ethereum.Event {
  get params(): RuleEffect__Params {
    return new RuleEffect__Params(this);
  }
}

export class RuleEffect__Params {
  _event: RuleEffect;

  constructor(event: RuleEffect) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get direction(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get value(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get name(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class RuleRemoved extends ethereum.Event {
  get params(): RuleRemoved__Params {
    return new RuleRemoved__Params(this);
  }
}

export class RuleRemoved__Params {
  _event: RuleRemoved;

  constructor(event: RuleRemoved) {
    this._event = event;
  }

  get originAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferBatchByToken extends ethereum.Event {
  get params(): TransferBatchByToken__Params {
    return new TransferBatchByToken__Params(this);
  }
}

export class TransferBatchByToken__Params {
  _event: TransferBatchByToken;

  constructor(event: TransferBatchByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferByToken extends ethereum.Event {
  get params(): TransferByToken__Params {
    return new TransferByToken__Params(this);
  }
}

export class TransferByToken__Params {
  _event: TransferByToken;

  constructor(event: TransferByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Jurisdiction__confirmationGetResultValue0Struct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class Jurisdiction__effectsGetResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get value(): i32 {
    return this[1].toI32();
  }

  get direction(): boolean {
    return this[2].toBoolean();
  }
}

export class Jurisdiction__reactionMakeInputAddRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Jurisdiction__reactionMakeInputAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class Jurisdiction__reactionMakeInputPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class Jurisdiction__reactionMakeOpenInputAddRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Jurisdiction__reactionMakeOpenInputAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class Jurisdiction__reactionMakeOpenInputPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class Jurisdiction__ruleAddInputRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class Jurisdiction__ruleAddInputConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class Jurisdiction__ruleAddInputEffectsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get value(): i32 {
    return this[1].toI32();
  }

  get direction(): boolean {
    return this[2].toBoolean();
  }
}

export class Jurisdiction__ruleGetResultValue0Struct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class Jurisdiction extends ethereum.SmartContract {
  static bind(address: Address): Jurisdiction {
    return new Jurisdiction("Jurisdiction", address);
  }

  GUIDHas(account: Address, guid: Bytes): boolean {
    let result = super.call("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid)
    ]);

    return result[0].toBoolean();
  }

  try_GUIDHas(account: Address, guid: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDHasByToken(soulToken: BigInt, guid: Bytes): boolean {
    let result = super.call(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid)
      ]
    );

    return result[0].toBoolean();
  }

  try_GUIDHasByToken(
    soulToken: BigInt,
    guid: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDURI(guid: Bytes): string {
    let result = super.call("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid)
    ]);

    return result[0].toString();
  }

  try_GUIDURI(guid: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  balanceOfToken(extTokenId: BigInt, id: BigInt): BigInt {
    let result = super.call(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(extTokenId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfToken(
    extTokenId: BigInt,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(extTokenId),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  confGet(key: string): string {
    let result = super.call("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key)
    ]);

    return result[0].toString();
  }

  try_confGet(key: string): ethereum.CallResult<string> {
    let result = super.tryCall("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  confirmationGet(id: BigInt): Jurisdiction__confirmationGetResultValue0Struct {
    let result = super.call(
      "confirmationGet",
      "confirmationGet(uint256):((string,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Jurisdiction__confirmationGetResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_confirmationGet(
    id: BigInt
  ): ethereum.CallResult<Jurisdiction__confirmationGetResultValue0Struct> {
    let result = super.tryCall(
      "confirmationGet",
      "confirmationGet(uint256):((string,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Jurisdiction__confirmationGetResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  effectsGet(id: BigInt): Array<Jurisdiction__effectsGetResultValue0Struct> {
    let result = super.call(
      "effectsGet",
      "effectsGet(uint256):((string,uint8,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toTupleArray<Jurisdiction__effectsGetResultValue0Struct>();
  }

  try_effectsGet(
    id: BigInt
  ): ethereum.CallResult<Array<Jurisdiction__effectsGetResultValue0Struct>> {
    let result = super.tryCall(
      "effectsGet",
      "effectsGet(uint256):((string,uint8,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Jurisdiction__effectsGetResultValue0Struct>()
    );
  }

  getExtTokenId(account: Address): BigInt {
    let result = super.call(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_getExtTokenId(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHub(): Address {
    let result = super.call("getHub", "getHub():(address)", []);

    return result[0].toAddress();
  }

  try_getHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHub", "getHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRepForDomain(
    contractAddr: Address,
    tokenId: BigInt,
    domain: string,
    rating: boolean
  ): BigInt {
    let result = super.call(
      "getRepForDomain",
      "getRepForDomain(address,uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRepForDomain(
    contractAddr: Address,
    tokenId: BigInt,
    domain: string,
    rating: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRepForDomain",
      "getRepForDomain(address,uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromAddress(contractAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRepForDomain1(
    chainId: BigInt,
    contractAddr: Address,
    tokenId: BigInt,
    domain: string,
    rating: boolean
  ): BigInt {
    let result = super.call(
      "getRepForDomain",
      "getRepForDomain(uint256,address,uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(contractAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRepForDomain1(
    chainId: BigInt,
    contractAddr: Address,
    tokenId: BigInt,
    domain: string,
    rating: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRepForDomain",
      "getRepForDomain(uint256,address,uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(contractAddr),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRepForDomain2(tokenId: BigInt, domain: string, rating: boolean): BigInt {
    let result = super.call(
      "getRepForDomain",
      "getRepForDomain(uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRepForDomain2(
    tokenId: BigInt,
    domain: string,
    rating: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRepForDomain",
      "getRepForDomain(uint256,string,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(domain),
        ethereum.Value.fromBoolean(rating)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTargetContract(): Address {
    let result = super.call(
      "getTargetContract",
      "getTargetContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTargetContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTargetContract",
      "getTargetContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  join(): BigInt {
    let result = super.call("join", "join():(uint256)", []);

    return result[0].toBigInt();
  }

  try_join(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("join", "join():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leave(): BigInt {
    let result = super.call("leave", "leave():(uint256)", []);

    return result[0].toBigInt();
  }

  try_leave(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("leave", "leave():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reactionHas(reactionContract: Address): boolean {
    let result = super.call("reactionHas", "reactionHas(address):(bool)", [
      ethereum.Value.fromAddress(reactionContract)
    ]);

    return result[0].toBoolean();
  }

  try_reactionHas(reactionContract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("reactionHas", "reactionHas(address):(bool)", [
      ethereum.Value.fromAddress(reactionContract)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  reactionMake(
    name_: string,
    uri_: string,
    addRules: Array<Jurisdiction__reactionMakeInputAddRulesStruct>,
    assignRoles: Array<Jurisdiction__reactionMakeInputAssignRolesStruct>,
    posts: Array<Jurisdiction__reactionMakeInputPostsStruct>
  ): Address {
    let result = super.call(
      "reactionMake",
      "reactionMake(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(addRules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts)
      ]
    );

    return result[0].toAddress();
  }

  try_reactionMake(
    name_: string,
    uri_: string,
    addRules: Array<Jurisdiction__reactionMakeInputAddRulesStruct>,
    assignRoles: Array<Jurisdiction__reactionMakeInputAssignRolesStruct>,
    posts: Array<Jurisdiction__reactionMakeInputPostsStruct>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reactionMake",
      "reactionMake(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(addRules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reactionMakeOpen(
    name_: string,
    uri_: string,
    addRules: Array<Jurisdiction__reactionMakeOpenInputAddRulesStruct>,
    assignRoles: Array<Jurisdiction__reactionMakeOpenInputAssignRolesStruct>,
    posts: Array<Jurisdiction__reactionMakeOpenInputPostsStruct>
  ): Address {
    let result = super.call(
      "reactionMakeOpen",
      "reactionMakeOpen(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(addRules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts)
      ]
    );

    return result[0].toAddress();
  }

  try_reactionMakeOpen(
    name_: string,
    uri_: string,
    addRules: Array<Jurisdiction__reactionMakeOpenInputAddRulesStruct>,
    assignRoles: Array<Jurisdiction__reactionMakeOpenInputAssignRolesStruct>,
    posts: Array<Jurisdiction__reactionMakeOpenInputPostsStruct>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reactionMakeOpen",
      "reactionMakeOpen(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(addRules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repoAddr(): Address {
    let result = super.call("repoAddr", "repoAddr():(address)", []);

    return result[0].toAddress();
  }

  try_repoAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("repoAddr", "repoAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleExist(role: string): boolean {
    let result = super.call("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role)
    ]);

    return result[0].toBoolean();
  }

  try_roleExist(role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHas(account: Address, role: string): boolean {
    let result = super.call("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role)
    ]);

    return result[0].toBoolean();
  }

  try_roleHas(account: Address, role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHasByToken(soulToken: BigInt, role: string): boolean {
    let result = super.call(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role)
      ]
    );

    return result[0].toBoolean();
  }

  try_roleHasByToken(
    soulToken: BigInt,
    role: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleURI(role: string): string {
    let result = super.call("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role)
    ]);

    return result[0].toString();
  }

  try_roleURI(role: string): ethereum.CallResult<string> {
    let result = super.tryCall("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  rolesHas(account: Address, roles: Array<string>): boolean {
    let result = super.call("rolesHas", "rolesHas(address,string[]):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromStringArray(roles)
    ]);

    return result[0].toBoolean();
  }

  try_rolesHas(
    account: Address,
    roles: Array<string>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rolesHas",
      "rolesHas(address,string[]):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromStringArray(roles)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ruleAdd(
    rule: Jurisdiction__ruleAddInputRuleStruct,
    confirmation: Jurisdiction__ruleAddInputConfirmationStruct,
    effects: Array<Jurisdiction__ruleAddInputEffectsStruct>
  ): BigInt {
    let result = super.call(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,uint8,bool)[]):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromTupleArray(effects)
      ]
    );

    return result[0].toBigInt();
  }

  try_ruleAdd(
    rule: Jurisdiction__ruleAddInputRuleStruct,
    confirmation: Jurisdiction__ruleAddInputConfirmationStruct,
    effects: Array<Jurisdiction__ruleAddInputEffectsStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,uint8,bool)[]):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromTupleArray(effects)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ruleGet(id: BigInt): Jurisdiction__ruleGetResultValue0Struct {
    let result = super.call(
      "ruleGet",
      "ruleGet(uint256):((bytes32,string,bool,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<Jurisdiction__ruleGetResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_ruleGet(
    id: BigInt
  ): ethereum.CallResult<Jurisdiction__ruleGetResultValue0Struct> {
    let result = super.tryCall(
      "ruleGet",
      "ruleGet(uint256):((bytes32,string,bool,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Jurisdiction__ruleGetResultValue0Struct>(value[0].toTuple())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uniqueMembers(id: BigInt): Array<BigInt> {
    let result = super.call(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigIntArray();
  }

  try_uniqueMembers(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueMembersCount(id: BigInt): BigInt {
    let result = super.call(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_uniqueMembersCount(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniqueRoleMembers(role: string): Array<BigInt> {
    let result = super.call(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)]
    );

    return result[0].toBigIntArray();
  }

  try_uniqueRoleMembers(role: string): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueRoleMembersCount(role: string): BigInt {
    let result = super.call(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)]
    );

    return result[0].toBigInt();
  }

  try_uniqueRoleMembersCount(role: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(token_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id)
    ]);

    return result[0].toString();
  }

  try_uri(token_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ConfSetCall extends ethereum.Call {
  get inputs(): ConfSetCall__Inputs {
    return new ConfSetCall__Inputs(this);
  }

  get outputs(): ConfSetCall__Outputs {
    return new ConfSetCall__Outputs(this);
  }
}

export class ConfSetCall__Inputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConfSetCall__Outputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get hub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LeaveCall extends ethereum.Call {
  get inputs(): LeaveCall__Inputs {
    return new LeaveCall__Inputs(this);
  }

  get outputs(): LeaveCall__Outputs {
    return new LeaveCall__Outputs(this);
  }
}

export class LeaveCall__Inputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }
}

export class LeaveCall__Outputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class NominateCall extends ethereum.Call {
  get inputs(): NominateCall__Inputs {
    return new NominateCall__Inputs(this);
  }

  get outputs(): NominateCall__Outputs {
    return new NominateCall__Outputs(this);
  }
}

export class NominateCall__Inputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }

  get soulToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NominateCall__Outputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }
}

export class PostCall extends ethereum.Call {
  get inputs(): PostCall__Inputs {
    return new PostCall__Inputs(this);
  }

  get outputs(): PostCall__Outputs {
    return new PostCall__Outputs(this);
  }
}

export class PostCall__Inputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }

  get entRole(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PostCall__Outputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }
}

export class ReactionDisableCall extends ethereum.Call {
  get inputs(): ReactionDisableCall__Inputs {
    return new ReactionDisableCall__Inputs(this);
  }

  get outputs(): ReactionDisableCall__Outputs {
    return new ReactionDisableCall__Outputs(this);
  }
}

export class ReactionDisableCall__Inputs {
  _call: ReactionDisableCall;

  constructor(call: ReactionDisableCall) {
    this._call = call;
  }

  get reactionContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReactionDisableCall__Outputs {
  _call: ReactionDisableCall;

  constructor(call: ReactionDisableCall) {
    this._call = call;
  }
}

export class ReactionMakeCall extends ethereum.Call {
  get inputs(): ReactionMakeCall__Inputs {
    return new ReactionMakeCall__Inputs(this);
  }

  get outputs(): ReactionMakeCall__Outputs {
    return new ReactionMakeCall__Outputs(this);
  }
}

export class ReactionMakeCall__Inputs {
  _call: ReactionMakeCall;

  constructor(call: ReactionMakeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get addRules(): Array<ReactionMakeCallAddRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      ReactionMakeCallAddRulesStruct
    >();
  }

  get assignRoles(): Array<ReactionMakeCallAssignRolesStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      ReactionMakeCallAssignRolesStruct
    >();
  }

  get posts(): Array<ReactionMakeCallPostsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      ReactionMakeCallPostsStruct
    >();
  }
}

export class ReactionMakeCall__Outputs {
  _call: ReactionMakeCall;

  constructor(call: ReactionMakeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ReactionMakeCallAddRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ReactionMakeCallAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class ReactionMakeCallPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class ReactionMakeOpenCall extends ethereum.Call {
  get inputs(): ReactionMakeOpenCall__Inputs {
    return new ReactionMakeOpenCall__Inputs(this);
  }

  get outputs(): ReactionMakeOpenCall__Outputs {
    return new ReactionMakeOpenCall__Outputs(this);
  }
}

export class ReactionMakeOpenCall__Inputs {
  _call: ReactionMakeOpenCall;

  constructor(call: ReactionMakeOpenCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get addRules(): Array<ReactionMakeOpenCallAddRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      ReactionMakeOpenCallAddRulesStruct
    >();
  }

  get assignRoles(): Array<ReactionMakeOpenCallAssignRolesStruct> {
    return this._call.inputValues[3].value.toTupleArray<
      ReactionMakeOpenCallAssignRolesStruct
    >();
  }

  get posts(): Array<ReactionMakeOpenCallPostsStruct> {
    return this._call.inputValues[4].value.toTupleArray<
      ReactionMakeOpenCallPostsStruct
    >();
  }
}

export class ReactionMakeOpenCall__Outputs {
  _call: ReactionMakeOpenCall;

  constructor(call: ReactionMakeOpenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ReactionMakeOpenCallAddRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ReactionMakeOpenCallAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class ReactionMakeOpenCallPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepAddCall extends ethereum.Call {
  get inputs(): RepAddCall__Inputs {
    return new RepAddCall__Inputs(this);
  }

  get outputs(): RepAddCall__Outputs {
    return new RepAddCall__Outputs(this);
  }
}

export class RepAddCall__Inputs {
  _call: RepAddCall;

  constructor(call: RepAddCall) {
    this._call = call;
  }

  get contractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get domain(): string {
    return this._call.inputValues[2].value.toString();
  }

  get rating(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get amount(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class RepAddCall__Outputs {
  _call: RepAddCall;

  constructor(call: RepAddCall) {
    this._call = call;
  }
}

export class RoleAssignCall extends ethereum.Call {
  get inputs(): RoleAssignCall__Inputs {
    return new RoleAssignCall__Inputs(this);
  }

  get outputs(): RoleAssignCall__Outputs {
    return new RoleAssignCall__Outputs(this);
  }
}

export class RoleAssignCall__Inputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignCall__Outputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }
}

export class RoleAssignToTokenCall extends ethereum.Call {
  get inputs(): RoleAssignToTokenCall__Inputs {
    return new RoleAssignToTokenCall__Inputs(this);
  }

  get outputs(): RoleAssignToTokenCall__Outputs {
    return new RoleAssignToTokenCall__Outputs(this);
  }
}

export class RoleAssignToTokenCall__Inputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }

  get ownerToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignToTokenCall__Outputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }
}

export class RoleChangeCall extends ethereum.Call {
  get inputs(): RoleChangeCall__Inputs {
    return new RoleChangeCall__Inputs(this);
  }

  get outputs(): RoleChangeCall__Outputs {
    return new RoleChangeCall__Outputs(this);
  }
}

export class RoleChangeCall__Inputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get roleOld(): string {
    return this._call.inputValues[1].value.toString();
  }

  get roleNew(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RoleChangeCall__Outputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }
}

export class RoleRemoveCall extends ethereum.Call {
  get inputs(): RoleRemoveCall__Inputs {
    return new RoleRemoveCall__Inputs(this);
  }

  get outputs(): RoleRemoveCall__Outputs {
    return new RoleRemoveCall__Outputs(this);
  }
}

export class RoleRemoveCall__Inputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveCall__Outputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }
}

export class RoleRemoveFromTokenCall extends ethereum.Call {
  get inputs(): RoleRemoveFromTokenCall__Inputs {
    return new RoleRemoveFromTokenCall__Inputs(this);
  }

  get outputs(): RoleRemoveFromTokenCall__Outputs {
    return new RoleRemoveFromTokenCall__Outputs(this);
  }
}

export class RoleRemoveFromTokenCall__Inputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }

  get ownerToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveFromTokenCall__Outputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }
}

export class RuleAddCall extends ethereum.Call {
  get inputs(): RuleAddCall__Inputs {
    return new RuleAddCall__Inputs(this);
  }

  get outputs(): RuleAddCall__Outputs {
    return new RuleAddCall__Outputs(this);
  }
}

export class RuleAddCall__Inputs {
  _call: RuleAddCall;

  constructor(call: RuleAddCall) {
    this._call = call;
  }

  get rule(): RuleAddCallRuleStruct {
    return changetype<RuleAddCallRuleStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get confirmation(): RuleAddCallConfirmationStruct {
    return changetype<RuleAddCallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get effects(): Array<RuleAddCallEffectsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      RuleAddCallEffectsStruct
    >();
  }
}

export class RuleAddCall__Outputs {
  _call: RuleAddCall;

  constructor(call: RuleAddCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RuleAddCallRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class RuleAddCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class RuleAddCallEffectsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get value(): i32 {
    return this[1].toI32();
  }

  get direction(): boolean {
    return this[2].toBoolean();
  }
}

export class RuleConfirmationUpdateCall extends ethereum.Call {
  get inputs(): RuleConfirmationUpdateCall__Inputs {
    return new RuleConfirmationUpdateCall__Inputs(this);
  }

  get outputs(): RuleConfirmationUpdateCall__Outputs {
    return new RuleConfirmationUpdateCall__Outputs(this);
  }
}

export class RuleConfirmationUpdateCall__Inputs {
  _call: RuleConfirmationUpdateCall;

  constructor(call: RuleConfirmationUpdateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get confirmation(): RuleConfirmationUpdateCallConfirmationStruct {
    return changetype<RuleConfirmationUpdateCallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class RuleConfirmationUpdateCall__Outputs {
  _call: RuleConfirmationUpdateCall;

  constructor(call: RuleConfirmationUpdateCall) {
    this._call = call;
  }
}

export class RuleConfirmationUpdateCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class RuleDisableCall extends ethereum.Call {
  get inputs(): RuleDisableCall__Inputs {
    return new RuleDisableCall__Inputs(this);
  }

  get outputs(): RuleDisableCall__Outputs {
    return new RuleDisableCall__Outputs(this);
  }
}

export class RuleDisableCall__Inputs {
  _call: RuleDisableCall;

  constructor(call: RuleDisableCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get disabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RuleDisableCall__Outputs {
  _call: RuleDisableCall;

  constructor(call: RuleDisableCall) {
    this._call = call;
  }
}

export class RuleUpdateCall extends ethereum.Call {
  get inputs(): RuleUpdateCall__Inputs {
    return new RuleUpdateCall__Inputs(this);
  }

  get outputs(): RuleUpdateCall__Outputs {
    return new RuleUpdateCall__Outputs(this);
  }
}

export class RuleUpdateCall__Inputs {
  _call: RuleUpdateCall;

  constructor(call: RuleUpdateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rule(): RuleUpdateCallRuleStruct {
    return changetype<RuleUpdateCallRuleStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get effects(): Array<RuleUpdateCallEffectsStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      RuleUpdateCallEffectsStruct
    >();
  }
}

export class RuleUpdateCall__Outputs {
  _call: RuleUpdateCall;

  constructor(call: RuleUpdateCall) {
    this._call = call;
  }
}

export class RuleUpdateCallRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class RuleUpdateCallEffectsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get value(): i32 {
    return this[1].toI32();
  }

  get direction(): boolean {
    return this[2].toBoolean();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get contract_uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetHubCall extends ethereum.Call {
  get inputs(): SetHubCall__Inputs {
    return new SetHubCall__Inputs(this);
  }

  get outputs(): SetHubCall__Outputs {
    return new SetHubCall__Outputs(this);
  }
}

export class SetHubCall__Inputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }

  get hubAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHubCall__Outputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }
}

export class SetRoleURICall extends ethereum.Call {
  get inputs(): SetRoleURICall__Inputs {
    return new SetRoleURICall__Inputs(this);
  }

  get outputs(): SetRoleURICall__Outputs {
    return new SetRoleURICall__Outputs(this);
  }
}

export class SetRoleURICall__Inputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }

  get role(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetRoleURICall__Outputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
