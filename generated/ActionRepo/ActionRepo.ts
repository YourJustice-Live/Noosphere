// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActionAdded extends ethereum.Event {
  get params(): ActionAdded__Params {
    return new ActionAdded__Params(this);
  }
}

export class ActionAdded__Params {
  _event: ActionAdded;

  constructor(event: ActionAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get subject(): string {
    return this._event.parameters[2].value.toString();
  }

  get verb(): string {
    return this._event.parameters[3].value.toString();
  }

  get object(): string {
    return this._event.parameters[4].value.toString();
  }

  get tool(): string {
    return this._event.parameters[5].value.toString();
  }

  get affected(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class ActionURI extends ethereum.Event {
  get params(): ActionURI__Params {
    return new ActionURI__Params(this);
  }
}

export class ActionURI__Params {
  _event: ActionURI;

  constructor(event: ActionURI) {
    this._event = event;
  }

  get guid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class GUIDCreated extends ethereum.Event {
  get params(): GUIDCreated__Params {
    return new GUIDCreated__Params(this);
  }
}

export class GUIDCreated__Params {
  _event: GUIDCreated;

  constructor(event: GUIDCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ActionRepo__actionAddInputSvoStruct extends ethereum.Tuple {
  get subject(): string {
    return this[0].toString();
  }

  get verb(): string {
    return this[1].toString();
  }

  get object(): string {
    return this[2].toString();
  }

  get tool(): string {
    return this[3].toString();
  }

  get affected(): string {
    return this[4].toString();
  }
}

export class ActionRepo__actionAddInputConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class ActionRepo__actionGetResultValue0Struct extends ethereum.Tuple {
  get subject(): string {
    return this[0].toString();
  }

  get verb(): string {
    return this[1].toString();
  }

  get object(): string {
    return this[2].toString();
  }

  get tool(): string {
    return this[3].toString();
  }

  get affected(): string {
    return this[4].toString();
  }
}

export class ActionRepo__actionGetConfirmationResultValue0Struct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class ActionRepo__actionHashInputSvoStruct extends ethereum.Tuple {
  get subject(): string {
    return this[0].toString();
  }

  get verb(): string {
    return this[1].toString();
  }

  get object(): string {
    return this[2].toString();
  }

  get tool(): string {
    return this[3].toString();
  }

  get affected(): string {
    return this[4].toString();
  }
}

export class ActionRepo extends ethereum.SmartContract {
  static bind(address: Address): ActionRepo {
    return new ActionRepo("ActionRepo", address);
  }

  GUIDHas(account: Address, guid: Bytes): boolean {
    let result = super.call("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid)
    ]);

    return result[0].toBoolean();
  }

  try_GUIDHas(account: Address, guid: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  actionAdd(
    svo: ActionRepo__actionAddInputSvoStruct,
    confirmation: ActionRepo__actionAddInputConfirmationStruct,
    uri: string
  ): Bytes {
    let result = super.call(
      "actionAdd",
      "actionAdd((string,string,string,string,string),(string,bool,uint256),string):(bytes32)",
      [
        ethereum.Value.fromTuple(svo),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromString(uri)
      ]
    );

    return result[0].toBytes();
  }

  try_actionAdd(
    svo: ActionRepo__actionAddInputSvoStruct,
    confirmation: ActionRepo__actionAddInputConfirmationStruct,
    uri: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "actionAdd",
      "actionAdd((string,string,string,string,string),(string,bool,uint256),string):(bytes32)",
      [
        ethereum.Value.fromTuple(svo),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromString(uri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  actionGet(guid: Bytes): ActionRepo__actionGetResultValue0Struct {
    let result = super.call(
      "actionGet",
      "actionGet(bytes32):((string,string,string,string,string))",
      [ethereum.Value.fromFixedBytes(guid)]
    );

    return changetype<ActionRepo__actionGetResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_actionGet(
    guid: Bytes
  ): ethereum.CallResult<ActionRepo__actionGetResultValue0Struct> {
    let result = super.tryCall(
      "actionGet",
      "actionGet(bytes32):((string,string,string,string,string))",
      [ethereum.Value.fromFixedBytes(guid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ActionRepo__actionGetResultValue0Struct>(value[0].toTuple())
    );
  }

  actionGetConfirmation(
    guid: Bytes
  ): ActionRepo__actionGetConfirmationResultValue0Struct {
    let result = super.call(
      "actionGetConfirmation",
      "actionGetConfirmation(bytes32):((string,bool,uint256))",
      [ethereum.Value.fromFixedBytes(guid)]
    );

    return changetype<ActionRepo__actionGetConfirmationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_actionGetConfirmation(
    guid: Bytes
  ): ethereum.CallResult<ActionRepo__actionGetConfirmationResultValue0Struct> {
    let result = super.tryCall(
      "actionGetConfirmation",
      "actionGetConfirmation(bytes32):((string,bool,uint256))",
      [ethereum.Value.fromFixedBytes(guid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ActionRepo__actionGetConfirmationResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  actionGetURI(guid: Bytes): string {
    let result = super.call("actionGetURI", "actionGetURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid)
    ]);

    return result[0].toString();
  }

  try_actionGetURI(guid: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "actionGetURI",
      "actionGetURI(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(guid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  actionHash(svo: ActionRepo__actionHashInputSvoStruct): Bytes {
    let result = super.call(
      "actionHash",
      "actionHash((string,string,string,string,string)):(bytes32)",
      [ethereum.Value.fromTuple(svo)]
    );

    return result[0].toBytes();
  }

  try_actionHash(
    svo: ActionRepo__actionHashInputSvoStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "actionHash",
      "actionHash((string,string,string,string,string)):(bytes32)",
      [ethereum.Value.fromTuple(svo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  bytes32ToString(_bytes32: Bytes): string {
    let result = super.call(
      "bytes32ToString",
      "bytes32ToString(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_bytes32)]
    );

    return result[0].toString();
  }

  try_bytes32ToString(_bytes32: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "bytes32ToString",
      "bytes32ToString(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(_bytes32)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  name2(): string {
    let result = super.call("name2", "name2():(string)", []);

    return result[0].toString();
  }

  try_name2(): ethereum.CallResult<string> {
    let result = super.tryCall("name2", "name2():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  testBytes(foo: Bytes): Bytes {
    let result = super.call("testBytes", "testBytes(bytes):(bytes)", [
      ethereum.Value.fromBytes(foo)
    ]);

    return result[0].toBytes();
  }

  try_testBytes(foo: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("testBytes", "testBytes(bytes):(bytes)", [
      ethereum.Value.fromBytes(foo)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get hub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActionAddCall extends ethereum.Call {
  get inputs(): ActionAddCall__Inputs {
    return new ActionAddCall__Inputs(this);
  }

  get outputs(): ActionAddCall__Outputs {
    return new ActionAddCall__Outputs(this);
  }
}

export class ActionAddCall__Inputs {
  _call: ActionAddCall;

  constructor(call: ActionAddCall) {
    this._call = call;
  }

  get svo(): ActionAddCallSvoStruct {
    return changetype<ActionAddCallSvoStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get confirmation(): ActionAddCallConfirmationStruct {
    return changetype<ActionAddCallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ActionAddCall__Outputs {
  _call: ActionAddCall;

  constructor(call: ActionAddCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ActionAddCallSvoStruct extends ethereum.Tuple {
  get subject(): string {
    return this[0].toString();
  }

  get verb(): string {
    return this[1].toString();
  }

  get object(): string {
    return this[2].toString();
  }

  get tool(): string {
    return this[3].toString();
  }

  get affected(): string {
    return this[4].toString();
  }
}

export class ActionAddCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class ActionSetConfirmationCall extends ethereum.Call {
  get inputs(): ActionSetConfirmationCall__Inputs {
    return new ActionSetConfirmationCall__Inputs(this);
  }

  get outputs(): ActionSetConfirmationCall__Outputs {
    return new ActionSetConfirmationCall__Outputs(this);
  }
}

export class ActionSetConfirmationCall__Inputs {
  _call: ActionSetConfirmationCall;

  constructor(call: ActionSetConfirmationCall) {
    this._call = call;
  }

  get guid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get confirmation(): ActionSetConfirmationCallConfirmationStruct {
    return changetype<ActionSetConfirmationCallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ActionSetConfirmationCall__Outputs {
  _call: ActionSetConfirmationCall;

  constructor(call: ActionSetConfirmationCall) {
    this._call = call;
  }
}

export class ActionSetConfirmationCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class ActionSetURICall extends ethereum.Call {
  get inputs(): ActionSetURICall__Inputs {
    return new ActionSetURICall__Inputs(this);
  }

  get outputs(): ActionSetURICall__Outputs {
    return new ActionSetURICall__Outputs(this);
  }
}

export class ActionSetURICall__Inputs {
  _call: ActionSetURICall;

  constructor(call: ActionSetURICall) {
    this._call = call;
  }

  get guid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ActionSetURICall__Outputs {
  _call: ActionSetURICall;

  constructor(call: ActionSetURICall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
