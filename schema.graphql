type AvatarNftEntity @entity {
  id: ID! # token id
  owner: Bytes! # account address
  uri: String # metadata uri
  reputations: [AvatarNftReputationEntity!]! @derivedFrom(field: "token")
}

type AvatarNftReputationEntity @entity {
  id: ID! # combintation of token id and domain id
  token: AvatarNftEntity!
  domain: Int!
  negativeRating: BigInt
  positiveRating: BigInt
}

type JurisdictionParticipantEntity @entity {
  id: ID! # account address
  isAdmin: Boolean
  isMember: Boolean
  isJudge: Boolean
}

type JurisdictionRuleEntity @entity {
  id: ID!
  about: ActionEntity!
  affected: String
  uri: String
  negation: Boolean
  effectsEnvironmental: Int
  effectsPersonal: Int
  effectsSocial: Int
  effectsProfessional: Int
  confirmationRuling: String
  confirmationEvidence: Boolean
  confirmationWitness: BigInt
}

type ActionEntity @entity {
  id: ID! # guid
  subject: String
  verb: String
  object: String
  tool: String
  uri: String
  rules: [JurisdictionRuleEntity!]! @derivedFrom(field: "about")
}

type CaseEntity @entity {
  id: ID! # contract address
  jurisdiction: Bytes!
  participants: [CaseParticipantEntity!]! @derivedFrom(field: "caseEntity")
}

type CaseParticipantEntity @entity {
  id: ID! # combination of case address and accout address
  caseEntity: CaseEntity!
  account: Bytes!
  isAdmin: Boolean
  isSubject: Boolean
  isPlaintiff: Boolean
  isJudge: Boolean
  isWitness: Boolean
  isAffected: Boolean
}